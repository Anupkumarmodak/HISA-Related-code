import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.holtwinters import ExponentialSmoothing
from sklearn.metrics import mean_squared_error, mean_absolute_error
import numpy as np
import os

# Step 1: Load the data
file_path = r'E:\BSMRAAU Research\Work with  Bari sir\PM10.csv'  # Changed to PM10.csv

if not os.path.exists(file_path):
    print(f"Error: File not found at {file_path}")
    exit()

df = pd.read_csv(file_path)

# Step 2: Prepare the time series data
df['date'] = pd.to_datetime(df['date'])
df.set_index('date', inplace=True)

# Handle missing values
df['value'] = pd.to_numeric(df['value'], errors='coerce')  # Ensure numeric
df['value'] = df['value'].interpolate(method='time')  # Interpolate missing values

# Step 3: Define time series
time_series = df['value'].astype(float)

# Optional: Split into training and testing to evaluate model performance
train = time_series[:-12]
test = time_series[-12:]

# Step 4: Fit the ETS model
seasonal_periods = 12  # Monthly data

model = ExponentialSmoothing(
    train,
    trend='additive',
    seasonal='additive',
    seasonal_periods=seasonal_periods
)
model_fit = model.fit(optimized=True)

# Step 5: Forecast
forecast_steps = 48
forecast_values = model_fit.forecast(forecast_steps)
forecast_index = pd.date_range(start=train.index[-1] + pd.DateOffset(months=1), periods=forecast_steps, freq='M')

# Step 6: Evaluate performance on test set
test_forecast = model_fit.forecast(12)
rmse = np.sqrt(mean_squared_error(test, test_forecast))
mae = mean_absolute_error(test, test_forecast)

print(f"RMSE on last 12 months: {rmse:.2f}")
print(f"MAE on last 12 months: {mae:.2f}")

# Step 7: Plot
plt.figure(figsize=(14, 7))
plt.plot(time_series, label='Observed', color='black')
plt.plot(forecast_index, forecast_values, label='Forecast (Next 48 months)', color='green')
plt.axvline(x=test.index[0], color='red', linestyle='--', label='Train/Test Split')
plt.title('PM10 Forecast using Exponential Smoothing')
plt.xlabel('Year')
plt.ylabel('PM10 Concentration')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()
