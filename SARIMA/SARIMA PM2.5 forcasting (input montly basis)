# --------------------------------------
# PM2.5 Forecasting with SARIMA (Only if Needed)
# Author: Samia (SARIMA Version)
# --------------------------------------

# STEP 1: Import Required Libraries
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.dates import DateFormatter
from statsmodels.tsa.statespace.sarimax import SARIMAX
from datetime import datetime

# Plot Style
plt.style.use('ggplot')

# STEP 2: Load PM2.5 Data
file_path = r'E:\BSMRAAU Research\Work with  Bari sir\PM2.5.csv'
df = pd.read_csv(file_path)

# STEP 3: Prepare Data
df['date'] = pd.to_datetime(df['date'])
df = df.rename(columns={'date': 'ds', 'value': 'y'})
df['y'] = pd.to_numeric(df['y'], errors='coerce')  # Handle non-numeric
df.set_index('ds', inplace=True)
df = df.resample('M').mean()  # Monthly average
df = df.dropna()  # Drop missing values

# STEP 4: Check Forecast Requirement
last_date = df.index.max()
today = pd.to_datetime(datetime.today().date())

if last_date >= today:
    print(f"‚úÖ Forecasting skipped. PM2.5 data is already up to date (until: {last_date.date()})")

    # Plot historical data
    plt.figure(figsize=(14, 6))
    plt.plot(df.index, df['y'], label='PM2.5 Data', color='black')
    plt.title('PM2.5 Concentration Over Time (No Forecast Needed)', fontsize=16, fontweight='bold')
    plt.xlabel('Date')
    plt.ylabel('PM2.5 Concentration (¬µg/m¬≥)')
    plt.grid(True, linestyle='--', alpha=0.6)
    plt.legend()
    plt.tight_layout()
    plt.show()

else:
    print(f"üìÖ Forecasting required. Last data point: {last_date.date()} | Today: {today.date()}")
    print(f"üß™ Total usable monthly data points: {len(df)}")

    forecast_months = 48
    forecast_index = pd.date_range(start=last_date + pd.offsets.MonthBegin(1), periods=forecast_months, freq='M')

    try:
        # STEP 5: Fit SARIMA Model
        model = SARIMAX(df['y'],
                        order=(1, 1, 1),              # (p,d,q)
                        seasonal_order=(1, 1, 1, 12),  # (P,D,Q,s)
                        enforce_stationarity=False,
                        enforce_invertibility=False)
        sarima_result = model.fit(disp=False)
        print("‚úÖ SARIMA model fitted successfully.")

        # STEP 6: Forecast
        forecast_values = sarima_result.get_forecast(steps=forecast_months)
        forecast_mean = forecast_values.predicted_mean
        forecast_ci = forecast_values.conf_int()

        # STEP 7: Plot Results
        plt.figure(figsize=(16, 8))
        plt.plot(df.index, df['y'], label='Historical PM2.5', color='black', linewidth=1.8)
        plt.plot(forecast_index, forecast_mean, label='Forecast PM2.5', color='darkgreen', linestyle='--', linewidth=2)
        plt.fill_between(forecast_index, forecast_ci.iloc[:, 0], forecast_ci.iloc[:, 1], color='green', alpha=0.2)

        plt.axvline(x=last_date, color='red', linestyle='--', linewidth=1.5)
        plt.text(last_date, plt.ylim()[1]*0.95, 'Forecast Begins', color='red', fontsize=11)

        plt.title('PM2.5 Forecast Using SARIMA Model', fontsize=18, fontweight='bold')
        plt.xlabel('Date', fontsize=13)
        plt.ylabel('PM2.5 Concentration (¬µg/m¬≥)', fontsize=13)
        plt.gca().xaxis.set_major_formatter(DateFormatter('%Y-%m'))
        plt.xticks(rotation=45)
        plt.grid(True, linestyle='--', alpha=0.6)
        plt.legend(fontsize=12)
        plt.tight_layout()
        plt.show()

    except Exception as e:
        print("‚ùå SARIMA model fitting failed:", str(e))
