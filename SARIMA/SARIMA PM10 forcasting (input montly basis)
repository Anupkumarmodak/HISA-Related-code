# ------------------------------------------------------
# üå´Ô∏è PM10 Forecasting using SARIMA Model (Auto-detect)
# Author: Samia | Final Version for PM10 with Visualization
# ------------------------------------------------------

# STEP 1: Import Required Libraries
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.dates import DateFormatter
from statsmodels.tsa.statespace.sarimax import SARIMAX
from datetime import datetime
import warnings
warnings.filterwarnings("ignore")

# Set Matplotlib Plot Style
plt.style.use('ggplot')

# STEP 2: Load PM10 Data
file_path = r'E:\BSMRAAU Research\Work with  Bari sir\PM10.csv'  # Update file name/path if necessary
print("üìÇ Loading data from:", file_path)

df = pd.read_csv(file_path)

# STEP 3: Prepare Data
print("üõ†Ô∏è Preparing and cleaning data...")
df['date'] = pd.to_datetime(df['date'])
df = df.rename(columns={'date': 'ds', 'value': 'y'})
df['y'] = pd.to_numeric(df['y'], errors='coerce')
df.set_index('ds', inplace=True)
df = df.resample('M').mean()   # Resample to monthly average
df = df.dropna()               # Remove missing entries
print(f"‚úÖ Data cleaned. Total monthly entries: {len(df)}")

# STEP 4: Check Forecasting Requirement
last_date = df.index.max()
today = pd.to_datetime(datetime.today().date())
forecast_months = 48
forecast_index = pd.date_range(start=last_date + pd.offsets.MonthBegin(1), periods=forecast_months, freq='M')

if last_date >= today:
    print(f"‚úÖ Forecasting skipped. Data is current up to {last_date.date()}")

    # Plot only historical data
    plt.figure(figsize=(14, 6))
    plt.plot(df.index, df['y'], label='PM10 Data', color='black', linewidth=2)
    plt.title('PM10 Concentration Over Time (No Forecast Needed)', fontsize=16, fontweight='bold')
    plt.xlabel('Date')
    plt.ylabel('PM10 Concentration (¬µg/m¬≥)')
    plt.grid(True, linestyle='--', alpha=0.6)
    plt.legend()
    plt.tight_layout()
    plt.show()

else:
    print(f"üìÖ Forecasting Required")
    print(f"üß™ Last available data: {last_date.date()} | Today's date: {today.date()}")
    
    try:
        # STEP 5: Fit SARIMA Model
        print("üîç Fitting SARIMA model (1,1,1)(1,1,1,12)...")
        model = SARIMAX(df['y'],
                        order=(1, 1, 1),
                        seasonal_order=(1, 1, 1, 12),
                        enforce_stationarity=False,
                        enforce_invertibility=False)

        sarima_result = model.fit(disp=False)
        print("‚úÖ SARIMA model fitted successfully.")

        # STEP 6: Forecast Future Values
        forecast = sarima_result.get_forecast(steps=forecast_months)
        forecast_mean = forecast.predicted_mean
        forecast_ci = forecast.conf_int()

        # Combine forecast and dates
        forecast_df = pd.DataFrame({
            'Date': forecast_index,
            'Forecast_PM10': forecast_mean.values,
            'Lower_CI': forecast_ci.iloc[:, 0].values,
            'Upper_CI': forecast_ci.iloc[:, 1].values
        })

        # Optional: Save to CSV
        export_path = r"E:\BSMRAAU Research\Work with  Bari sir\PM10_Forecast_SARIMA.csv"
        forecast_df.to_csv(export_path, index=False)
        print(f"üìÅ Forecast data saved to: {export_path}")

        # STEP 7: Visualization
        print("üìä Plotting historical and forecast data (compact layout)...")

        plt.figure(figsize=(14, 6))
        plt.plot(df.index, df['y'], label='Historical PM10', color='black', linewidth=2)
        plt.plot(forecast_index, forecast_mean, label='Forecast PM10', color='blue', linestyle='--', linewidth=2)
        plt.fill_between(forecast_index, forecast_ci.iloc[:, 0], forecast_ci.iloc[:, 1],
                         color='blue', alpha=0.2, label='95% Confidence Interval')

        plt.axvline(x=last_date, color='red', linestyle='--', linewidth=1.5)
        plt.text(last_date, plt.ylim()[1]*0.95, 'Forecast Starts', color='red', fontsize=10, ha='left', va='bottom')

        plt.title('PM10 Forecast Using SARIMA Model', fontsize=16, fontweight='bold', pad=15)
        plt.xlabel('Date', fontsize=11)
        plt.ylabel('PM10 Concentration (¬µg/m¬≥)', fontsize=11)

        plt.xticks(rotation=45)
        plt.gca().xaxis.set_major_formatter(DateFormatter('%Y-%m'))
        plt.tick_params(axis='both', which='major', labelsize=10)

        plt.grid(True, linestyle='--', alpha=0.5)
        plt.legend(fontsize=10, loc='upper left')
        plt.subplots_adjust(left=0.08, right=0.98, top=0.92, bottom=0.15)
        plt.tight_layout()
        plt.show()

    except Exception as e:
        print("‚ùå SARIMA model fitting failed:", str(e))
